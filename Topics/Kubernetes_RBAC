## KUBERNETES RBAC

[User accounts versus service accounts](https://kubernetes.io/docs/reference/access-authn-authz/service-accounts-admin/#:~:text=User%20accounts%20are%20for%20humans,all%20namespaces%20of%20a%20cluster.)

### **USERS:** They can be any individual or a process that intercats with Kubernetes Cluster. It can be admin, developer or even an automated system interacting with the cluster. users are not managed by kubernetes and is assumed that they are managed externally. users are represted as a string like "pratik" or "pratik@example.com"

### **GROUPS:** Groups are also managed outside Kubernetes. A group represents multiple users and its a way to attach a set of users to a vertain set of permissions. _When permissions are give to a group, all users that are part of the group receives those permissions._
 
### **SERVICE ACCOUNT:** A service account is a type of non-human account that, in Kubernetes, provides a distinct identity in a Kubernetes cluster. Application Pods, system components, and entities inside and outside the cluster can use a specific ServiceAccount's credentials to identify as that ServiceAccount. 

They are used by applications running inside a cluster. Unlike Groups or users, they are managed by Kubernetes and are Kubernetes Objects. This identity is useful in various situations, including authenticating to the API server or implementing identity-based security policies. They are tied to a specific namespace and their permission is scoped to this namespace. Service Accounts are used to give application running on a pod the necessary permissions to interact with Kubernetes API. 

** **

- Let's start by taking a look at our current kubeconfig
```bash
kubectl config view
```

- To see the information that is currently hidden, we can add the parameter of --raw 
```bash
kubectl config view --raw
OR
cat .kube/config
```

- To know more about the `certificate-authority-data` from above command:
```bash
echo `certificate-authority-data-VALUE` | base64 -d
```
For more info on certs: 

```
echo `certificate-authority-data-VALUE` | base64 -d | openssl x509 -text --noout
```

** **

### Cluster role bindings link accounts to cluster roles and grant access across all resources. To grant permissions across a whole cluster, you can use a ClusterRoleBinding.

### ClusterRole: A ClusterRole is a non-namespaced resources, meaning it applies to entire cluster and it allows us to set permission on resources across all namespaces. FYI: ClusterRole is non NAMESPACED. 

### ClusterRoleBindings: It binds a ClusterRole with Service Accouts, Users and Groups. 


```bash
k get clusterrolebinding -o wide
```
Example from above command: _The **ClusterRoleBinding** of cluster-admin binds the **ClusterRole** of cluster-admin and the **Group** system:masters TOGETHER_

```
kubectl describe ClusterRole/cluster-admin
OR
k describe clusterrole cluster-admin 
```

As mentioned above, the certifcates gives you comprehensive details about the issued certificate. Keep a closer look at the `Subject` under `Validity`. 
```echo client-certificate-data | base64 -d | openssl x509 -text --noout```   


Refer to [Users](#users-they-can-be-any-individual-or-a-process-that-intercats-with-kubernetes-cluster-it-can-be-admin-developer-or-even-an-automated-system-interacting-with-the-cluster-users-are-not-managed-by-kubernetes-and-is-assumed-that-they-are-managed-externally-users-are-represted-as-a-string-like-pratik-or-pratikexamplecom), [Groups](#groups-groups-are-also-managed-outside-kubernetes-a-group-represents-multiple-users-and-its-a-way-to-attach-a-set-of-users-to-a-vertain-set-of-permissions-when-permissions-are-give-to-a-group-all-users-that-are-part-of-the-group-receives-those-permissions) and [Service Accounts](#service-account-a-service-account-is-a-type-of-non-human-account-that-in-kubernetes-provides-a-distinct-identity-in-a-kubernetes-cluster-application-pods-system-components-and-entities-inside-and-outside-the-cluster-can-use-a-specific-serviceaccounts-credentials-to-identify-as-that-serviceaccount).


** ** 

## Lets create ClusterRole and ClusterRoleBindings which we saw previously 
- Create ClusterRole (`cluster-superheroes` or `cluster-pratik`)
```bash
kubectl create clusterrole cluster-superhero --verb='*' --resource='*'
OR
kubectl create clusterrole cluster-pratik --verb='get,list,create' --resource='*'
```

```bash
k describe clusterrole cluster-superhero
k describe clusterrole cluster-pratik
```

- We'll bind this using a clusterrolebinding and we'll instruct it to bind to the group of `cluster-superheroes` or `cluster-pratik`
```bash
kubectl create clusterrolebinding cluster-superhero --clusterrole=cluster-superhero --group=cluster-superheroes
OR
kubectl create clusterrolebinding cluster-pratik --clusterrole=cluster-pratik --group=cluster-pratik 
```

Verfiy
```bash
kubectl get clusterrolebindings -o wide | egrep 'Name|^cluster-'
```

- We can use kubectl auth can-i to verify permissions, as an example, as our super user account check that we can do access any resource with any verb
```bash
kubectl auth can-i '*' '*'
```
We can expand this further, for example, we could check this against our group with an assigned user of batman

```
kubectl auth can-i '*' '*' --as-group="cluster-superheroes" --as="batman"
OR
kubectl auth can-i '*' '*' --as-group="cluster-pratik" --as="pratik"
OR
kubectl auth can-i 'list' '*' --as-group="cluster-pratik" --as="batman"
```
** **
## Configuring an RBAC User/Group Manually 

- 
```bash

```

- 
```bash

```

- 
```bash

```

- 
```bash

```



** **

#### If you wish to see every resource and verb that is available we can do so with kube api-resources
```bash
kubectl api-resources --sort-by name -o wide | more
```